Beginners Guide to Context
18 August 2016
Tags: go golang context

* Hi I'm Paul

- CTO @ Daily Burn
- Rails Developer -> iOS Developer -> Go Developer
- Started using Go about 5 years ago
- Wrote the first pieces of Go code at Daily Burn for backend infrastructure
- We now use Go for queueing, real time messaging, ETL, devops

: I've been using Go for the past 5 years, attended the first 2 gophercon's and lots of go talks at GoogleIO over the years

: I don't get to write too much code now but almost all the code I do write is in Go

: Experimenting with Go as a language of choice for web development

.image ./logo_horizontal.svg

: -------------------------------------------------------------------------------

* Let's Talk

- Goal of this talk is to introduce you to the context package
- What is it good for
- How to use it, Where to use it
- Some best practices picked up from around the web

: When I first read the context blog post I found it a bit hard to wrap my head around the appropriate use of the package

: The idea and the reasoning behind it made perfect sense but the actual in practice use cases weren't completely clear to me

: I'll try to keep this at a beginner/intermediate level and not get into to any complex weeds


.image ./funny_picture_goes_here

: I once saw Joel Spolsky give a keynote at RailsConf, and one of the things he said and how he opened his talk was with a picture of some really attractive people. He said that the it was always a good idea to start a talk off with an appealing image or a funny image so that you create a good positive impression of yourself

: -------------------------------------------------------------------------------

* The Problem(s)

- Your code is responsible for managing the lifecycle of any goroutine it creates
- Goroutines don't have any 'thread local' state
- In Go servers each new request spawns it's own goroutines
- So how can we solve these in a standarized way?

.image ./lifecycle_of_a_request

: When a Go server receives a request it spawns a new goroutine specifically to handle the request
: These request handling goroutines often spin up additional goroutines of their own to do things like connect to databases, talk to RPC services or do computations
: Since go has no thread local state - eg. goroutines have only the state you explicitly give them there is not an easy way out of the box to pass values to a goroutine.
: The other side of goroutines which you have probably noticed is that you are responsible for managing the lifecycle of any goroutine your code creates.
: In the case of a request there are cases where a request may end before all the goroutines you created to do work for you have finished. In these cases you also need to have some way to cancel or stop the goroutines you've created
: If you've written much go code you have probably already tried several ways of doing this.
: The context package seeks to provide a nice standardized way to solve for these two problems - how to share data and how to manage the lifecycle of your goroutines.

: -------------------------------------------------------------------------------

* The Solution

- The Context package provides a few key mechanisms to solve the problems of managing context during a request and specifically managing goroutines
- Request scoped data
- Cancellation
- Deadlines and timeouts
- Safe for concurrent use

: -------------------------------------------------------------------------------

* Some Context for Context

- The Context Package originated out of Google and was announced officially in July 2014
- The package satisfies the need for request scoped data and provides a standardized way to handle cancellation and deadlines
- It provides a way to facilitate across API boundaries to goroutines created when handling a request

.image ./example_flow_with_context_graphic

: -------------------------------------------------------------------------------

* Context and Go 1.7

- The context package has been around long enough to have proven its worth
- Now with Go 1.7 Context is becoming part of the core library
- Along with this are some additional changes to net, net/http and os/exec
- All of this will make it even easier to work with and are a great reason you should all consider using it in your projects

: Context has now proven itself valuable enough that it's being added to the core library and some useful helpers are being added to other core libraries to make it even easier to work with.

: -------------------------------------------------------------------------------

* The Context Type

- Context is made up of the Context Type along with some supporting functions

.code context.txt

: -------------------------------------------------------------------------------

* Done()

- The Done function returns a channel that acts as a cancellation signal to functions running on behalf of Context
- When the channel is closed the functions should end execution and exit

.code done1.txt

: -------------------------------------------------------------------------------

* Err(), Deadline()

- The Err() function returns an error indicating why the Context was cancelled
- The Deadline() function allows a sub-operation to determine if it should start work
- Deadline() returns both a time value indicating when work should be cancelled along with a boolean indicating if a deadline has been set on the context

: -------------------------------------------------------------------------------

* Value()

- The Value() function provides a way to store request scoped data on the context object

A few notes from recent context conversations online:

- Context value handling is completely type unsafe and can't be checked at compile time
- Essentially a `map[interface{}]interface{}`
- Good examples of data to store in context include data extracted from headers or cookies, userID's tied to auth information, etc

: -------------------------------------------------------------------------------

* Derived Contexts

- The context package provides functions that derive new Context values from existing ones
- These Contexts form a tree and when any Context is cancelled all those dervied from it are also cancelled
- Provides a mechanism to manage the lifecycle of dependent functions within a request scoped operation

.image ./example_context_derivation_lifecycle_image

: -------------------------------------------------------------------------------

* Instantiating Contexts

: There are several functions that can be used to instantiate contexts

Background()

.code func_background.txt

- Typically the top level Context for incoming requests

: Background returns a non-nil, empty Context. It is never canceled, has no values, and has no deadline. It is typically used by the main function, initialization, and tests, and as the top-level Context for incoming requests

TODO()

.code func_todo.txt

- If it's unclear what Context to use or it is not yet available use TODO never send nil for a Context parameter

: TODO returns a non-nil, empty Context. Code should use context.TODO when it's unclear which Context to use or it is not yet available (because the surrounding function has not yet been extended to accept a Context parameter). TODO is recognized by static analysis tools that determine whether Contexts are propagated correctly in a program

* Instantiating Contexts (cont'd)

: -------------------------------------------------------------------------------

WithCancel():

.code with_cancel.txt

- Returns a copy of the parent with a new Done channel, the returned context's Done channel is closed when the returned cancel function is called or the parent Context Done channel is closed

: WithCancel returns a copy of parent with a new Done channel. The returned context's Done channel is closed when the returned cancel function is called or when the parent context's Done channel is closed, whichever happens first.

: Canceling this context releases resources associated with it, so code should call cancel as soon as the operations running in this Context complete

: -------------------------------------------------------------------------------

WithDeadline()

.code with_deadline.txt

- Takes a time param and returns a copy of the parent context with the deadline adjusted to be no later than the time parameter

: If the parent's deadline is already earlier than the time param the parent deadline holds.

- The context's Done channel is closed when the deadline expires, when the returned cancel function is called or when the parent's Done channel is closed (whichever comes first)

: WithDeadline returns a copy of the parent context with the deadline adjusted to be no later than d. If the parent's deadline is already earlier than d, WithDeadline(parent, d) is semantically equivalent to parent. The returned context's Done channel is closed when the deadline expires, when the returned cancel function is called, or when the parent context's Done channel is closed, whichever happens first.

: Canceling this context releases resources associated with it, so code should call cancel as soon as the operations running in this Context complete

: -------------------------------------------------------------------------------

* Instantiating Contexts (cont'd)

WithTimeout()

.code with_timeout.txt

- Returns a context with the deadline set to the current time plus the value of the timeout
- Code should call cancel as soon as operations running this Context complete

: WithTimeout returns WithDeadline(parent, time.Now().Add(timeout)).

: Canceling this context releases resources associated with it, so code should call cancel as soon as the operations running in this Context complete

WithValue()

.code with_value.txt

- Returns a copy of the parent in which the value for the specified key is set to val

: WithValue returns a copy of parent in which the value associated with key is val.

: Use context Values only for request-scoped data that transits processes and APIs, not for passing optional parameters to functions

: -------------------------------------------------------------------------------


* Next

.play hello.go

: -------------------------------------------------------------------------------

* Thanks

Paul Crawford
CTO @ Daily Burn
paul@dailyburn.com
@paulcrawford